#You are given a strings. You need to reverse the string.
Ans. 
class Solution {
    
    reverseWord(str){
        //Your code here
        let reverse = "";
        for ( let i = str.length - 1; i>=0 ; i--) {
            reverse += str.charAt(i);
        }return reverse;
    }
}
input: Rahul   Output: luhaR
------------------------------------------------------------------------------

#Given a sorted array of size N and an integer K, 
find the position at which K is present in the array using binary search.

Ans.
class Solution {
    binarysearch(arr, n, k) {
        // code here
        for (let i=0; i <= n ; i++ ) {
            if ( arr[i] == k ) {
                return i;
            }
            
        }
        return -1;
    }
}
Input:
N = 5
arr[] = {1 2 3 4 5} 
K = 4
Output: 3

Input:
N = 5
arr[] = {11 22 33 44 55} 
K = 445
Output: -1

----------------------------------------------------------------------------------

Given an unsorted array A of size N that contains only non-negative integers, 
find a continuous sub-array which adds to a given number S and return the left and right index 
of that subarray.

ans.

subarraySum(arr, n, s)
    {
      if(s === 0) return [-1]
        for(let head = 0, tail = 0, sum = 0; head <= arr.length;) {         

            if(sum < s) {
              sum += arr[head]
              head++
            }

            if(sum === s) {
              return [tail + 1, head]
            }

            if(sum > s) {
              sum -= arr[tail]
              tail++
            } 
            
          }     

        return [-1]
    }

N = 5, S = 12
A[] = {1,2,3,7,5}
Output: 2 4

N = 10, S = 15
A[] = {1,2,3,4,5,6,7,8,9,10}
Output: 1 5

---------------------------------------------------------------------------------------

another solution of same problem:

class Solution 
{
    //Function to find a continuous sub-array which adds up to a given number.
    subarraySum(arr, n, s)
    {
        //your code here
        
      let sum=arr[0];
      let start=0;
      if(sum==s) return [start+1,start+1];
      for(let i=1;i<arr.length;i++){
          sum+=arr[i];
          if (sum>s && start<i){
              sum-=arr[start]
              start++;
          }
       
          if (sum==s){
              return [start+1,i+1];
          }
      }
      return [-1];
    
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------

# Check if two arrays A & B are equal or not, N is length of both array.


check(A,B,N){
        
        A.sort();
        B.sort();
        for (let i=0; i<N; i++) {
            if ( A[i] != B[i]) return false
        }return true
    }
// without sort, the check will be difficult.
// checking for not equal is right approach because not check will check if these arrays are equal or not..

Input:
N = 5
A[] = {1,2,5,4,0}
B[] = {2,4,5,0,1}
Output: 1


Input:
N = 3
A[] = {1,2,5}
B[] = {2,4,15}
Output: 0

==================================================================================================================================================================
# Find minimum and maximum element in an array

Input:
N = 6
A[] = {3, 2, 1, 56, 10000, 167}
Output:
min = 1, max =  10000

because of large inputs out sort method do not work.. it took me 20 min to figure out what is happening to my code. 

for that we have to initialise the variables as bigInt values so that it grabs large space in the call stack memory. min and max values are assigned with infinity. then our Math.min and max could work on that.

getMinMax(arr,n){
        let min = Infinity;
        let max = -Infinity;

    for(let i = 0; i < arr.length; i++) {
        min = Math.min(arr[i], min);
        max = Math.max(arr[i], max);
    }

   return [min,max];
    }

-----------------------
we can also do it by if checks and assigning the values to these min and max variables.

getMinMax(arr,n){
        let min = Infinity;
    let max = -Infinity;

    for(let i=0;i<n;i++)
    {
        if(arr[i]>max)
        {
            max = arr[i];
        }
        if(arr[i]<min)
        {
            min = arr[i];
        }
    }

   return [min,max];
    }
    
Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

time complexity and space complexity will be discussed in DSA repo.
=========================================================================================
Given an array arr[] of positive integers of size N. Reverse every sub-array group of size K.
Input:
N = 5, K = 3
arr[] = {1,2,3,4,5}
Output expected: 3 2 1 5 4
//Function to reverse every sub-array group of size k.
could not solve this question.. I don't know about the swapping is required here. itried by slicing the Array and reverse method, but it does'nt work.
    
   // Swap integers in array group
  swap(arr, i, j) {
    let temp = arr[j];
    arr[j] = arr[i];
    arr[i] = temp;
    return arr;
  }

  // Call swap on group
  callInGroup(arr, i, j) { 
    while (i < j) {
      arr = this.swap(arr, i, j);
      i++;
      j--;
    }
    return arr;
  }

  reverseInGroups(arr, n, k) {
    let i = 0;                       
    let j = Math.min(k - 1, n - 1);
    while (i < j && j < n) {
      arr = this.callInGroup(arr, i, j);
      // Check for remaning group elements 
      if (n - (j + 1) >= k) { 
        i = i + k;
        j = j + k;
      } else {
        i = i + k;
        j = n - 1;
      }
    }
    return arr;
  }

